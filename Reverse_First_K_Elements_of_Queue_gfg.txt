Reverse First K elements of Queue 
Easy Accuracy: 57.92% Submissions: 37986 Points: 2
Given an integer K and a queue of integers, we need to reverse the order of the first K elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

enqueue(x) : Add an item x to rear of queue
dequeue() : Remove an item from front of queue
size() : Returns number of elements in queue.
front() : Finds front item.
Example 1:

Input:
5 3
1 2 3 4 5

Output: 
3 2 1 4 5

Explanation: 
After reversing the given
input from the 3rd position the resultant
output will be 3 2 1 4 5.

Example 2:

Input:
4 4
4 3 2 1

Output: 
1 2 3 4

Explanation: 
After reversing the given
input from the 4th position the resultant
output will be 1 2 3 4.
Your Task:
Complete the provided function modifyQueue that takes queue and k as parameters and returns a modified queue. The printing is done automatically by the driver code.

Expected TIme Complexity : O(n)
Expected Auxilliary Space : O(n)

Constraints:
1 <= N <= 1000
1 <= K <= N


Java solution 
GFG

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head==null)
            return null;
        ListNode headtwo=new ListNode();
        ListNode p1=headtwo;
        ListNode headthree=new ListNode();
        ListNode p2=headthree;
        ListNode p=head;
        int count1=0;
        int count2=0;
        while(p!=null)
        {
            if(p.val<x)
            {
                headtwo.next=p;
                p=p.next;
                headtwo=headtwo.next;
                headtwo.next=null;
            }
            else
            {
                headthree.next=p;
                p=p.next;
                headthree=headthree.next;
                headthree.next=null;
            }
        }     
        headtwo.next=p2.next;
        return p1.next;
    }
}
