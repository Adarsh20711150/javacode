62. Unique Paths
Medium

7275

270

Add to List

Share
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
Example 3:

Input: m = 7, n = 3
Output: 28
Example 4:

Input: m = 3, n = 3
Output: 6
 

Constraints:

1 <= m, n <= 100
It's guaranteed that the answer will be less than or equal to 2 * 109.



java solution 
0ms 
3 solution types described 

dinamic programming is executed




class Solution {
    public int uniquePaths(int m, int n) {
        
        // if(m==1 ||n==1) return 1;         // this will not work since it is a recursive call and multiple calls are there of same values hence return TLE
        // return uniquePaths(m-1,n)+uniquePaths(m,n-1);
        //one way can be we can store the value by each  itteration and if we encounter same iteration again then we will just return the previously calculated value of it
        
        
        //convert recursiion to iteraion
        int [][] arr=new int[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0||j==0)
                    arr[i][j]=1;
                else
                {
                    arr[i][j]=arr[i-1][j]+arr[i][j-1];
                }
            }
        }
        return arr[m-1][n-1];
    }
}
